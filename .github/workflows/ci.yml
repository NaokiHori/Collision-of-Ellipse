name: CI

on:

  push:
    branches:
      - main
    paths:
      - docs/**
      - src/**
      - include/**
      - .github/workflows/ci.yml

jobs:

  simulate:
    name: Run example scripts
    runs-on: ubuntu-latest
    steps:
      - name: Install dependencies
        run: |
          sudo apt-get -y install make
      - name: Checkout repository
        uses: actions/checkout@v1
        with:
          repository: 'NaokiHori/Collision-of-Ellipse'
          ref: 'main'
      - name: Compile
        run: |
          make all
      - name: Run case
        run: |
          ./a.out
      - name: Save results
        run: |
          mkdir artifacts
          cp \
            *.dat \
            artifacts/
      - name: Write metadata
        run: |
          echo "OS   :" $(cat /etc/os-release | grep PRETTY_NAME | awk -F "=" '{print $2}') >> artifacts/ci.txt
          echo "Date :" $(date) >> artifacts/ci.txt
          echo "Hash :" $(git rev-parse HEAD) >> artifacts/ci.txt
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: DatFiles
          path: artifacts

  build-and-deploy-doc:
    name: Build and deploy documentation
    needs: [simulate]
    permissions:
      contents: read
      pages: write
      id-token: write
    concurrency:
      group: "pages"
      cancel-in-progress: true
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Install dependencies
        run: sudo apt-get -y install gnuplot ghostscript imagemagick
      - name: Edit ghostscript config
        run: |
          sudo sed -i 's/rights="none"/rights="read|write"/g' /etc/ImageMagick-6/policy.xml
      - name: Checkout repository
        uses: actions/checkout@v1
        with:
          repository: 'NaokiHori/Collision-of-Ellipse'
          ref: 'main'
      - name: Download DatFiles
        uses: actions/download-artifact@v3
        with:
          name: DatFiles
          path: docs/source/data/artifacts
      - name: Create eps and tex files
        run: |
          cd docs
          cp create_figures/gnuplot.sh .
          bash gnuplot.sh
      - name: Convert eps to pdf
        run: |
          cd docs
          cp create_figures/epstopdf.sh .
          docker run \
            --rm \
            --volume ${PWD}:/project \
            --workdir /project \
            naokihori/texlive:gnuplot-epslatex \
            /bin/sh epstopdf.sh
      - name: Compile tex files
        run: |
          cd docs
          cp create_figures/pdflatex.sh .
          docker run \
            --rm \
            --volume ${PWD}:/project \
            --workdir /project \
            naokihori/texlive:gnuplot-epslatex \
            /bin/sh pdflatex.sh
      - name: Convert pdf to png
        run: |
          cd docs
          sh create_figures/pdf-to-png.sh
      - name: Build documentation using Sphinx
        run: |
          echo "cd docs && make html" > sphinx.sh
          docker run \
            --rm \
            --volume ${PWD}:/project \
            --workdir /project \
            sphinxdoc/sphinx:5.0.1 \
            /bin/bash sphinx.sh
      - name: Setup GitHub Pages
        uses: actions/configure-pages@v1
      - name: Upload HTML artifact
        uses: actions/upload-pages-artifact@v1
        with:
          path: docs/build/html
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@main

